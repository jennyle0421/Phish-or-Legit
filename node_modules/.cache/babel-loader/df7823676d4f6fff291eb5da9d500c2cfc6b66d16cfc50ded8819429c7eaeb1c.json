{"ast":null,"code":"var _jsxFileName = \"/Users/jennyle/Documents/CSCI-635/PhishOrLegit/phish-or-legit/src/Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Container, Typography, Card, CardContent } from \"@mui/material\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  question: \"Which of these is a sign of a phishing email?\",\n  options: [\"An email from your bank asking you to confirm your password via a link\", \"A message from your friend with a funny video\", \"An update from your favorite online store about a sale\"],\n  correctIndex: 0,\n  explanation: \"Legitimate banks will never ask for your password via email.\"\n}, {\n  question: \"What should you do if you receive an email claiming you won a prize?\",\n  options: [\"Click the link to claim it\", \"Ignore it and report it as spam\", \"Reply to the sender asking for more details\"],\n  correctIndex: 1,\n  explanation: \"Unexpected prize emails are often scams. It's best to report and ignore them.\"\n}];\nconst Quiz = () => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const handleAnswerClick = index => {\n    setSelectedOption(index);\n    setShowFeedback(true);\n    if (index === questions[currentQuestion].correctIndex) {\n      setScore(score + 1);\n    }\n  };\n  const handleNextQuestion = () => {\n    setSelectedOption(null);\n    setShowFeedback(false);\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      alert(`Quiz completed! Your score: ${score}/${questions.length}`);\n      setCurrentQuestion(0);\n      setScore(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Phish or Legit?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: [\"Question \", currentQuestion + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      style: {\n        padding: \"20px\",\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: questions[currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions[currentQuestion].options.map((option, index) => /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: showFeedback && index === questions[currentQuestion].correctIndex ? \"success\" : showFeedback && index === selectedOption ? \"error\" : \"primary\",\n        style: {\n          display: \"block\",\n          width: \"100%\",\n          marginBottom: \"10px\"\n        },\n        onClick: () => handleAnswerClick(index),\n        disabled: showFeedback,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), showFeedback && /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      style: {\n        padding: \"20px\",\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: selectedOption === questions[currentQuestion].correctIndex ? \"Correct!\" : \"Incorrect!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: questions[currentQuestion].explanation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          style: {\n            marginTop: \"10px\"\n          },\n          onClick: handleNextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"U+6vR6zlCogiJHobbRL24wRPjRo=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","Button","Container","Typography","Card","CardContent","jsxDEV","_jsxDEV","questions","question","options","correctIndex","explanation","Quiz","_s","currentQuestion","setCurrentQuestion","score","setScore","selectedOption","setSelectedOption","showFeedback","setShowFeedback","handleAnswerClick","index","handleNextQuestion","length","alert","maxWidth","style","textAlign","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","padding","marginBottom","map","option","color","display","width","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/jennyle/Documents/CSCI-635/PhishOrLegit/phish-or-legit/src/Quiz.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Container, Typography, Card, CardContent } from \"@mui/material\";\nimport \"./App.css\";\n\nconst questions = [\n  {\n    question: \"Which of these is a sign of a phishing email?\",\n    options: [\n      \"An email from your bank asking you to confirm your password via a link\",\n      \"A message from your friend with a funny video\",\n      \"An update from your favorite online store about a sale\",\n    ],\n    correctIndex: 0,\n    explanation: \"Legitimate banks will never ask for your password via email.\"\n  },\n  {\n    question: \"What should you do if you receive an email claiming you won a prize?\",\n    options: [\n      \"Click the link to claim it\",\n      \"Ignore it and report it as spam\",\n      \"Reply to the sender asking for more details\",\n    ],\n    correctIndex: 1,\n    explanation: \"Unexpected prize emails are often scams. It's best to report and ignore them.\"\n  },\n];\n\nconst Quiz = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showFeedback, setShowFeedback] = useState(false);\n\n  const handleAnswerClick = (index) => {\n    setSelectedOption(index);\n    setShowFeedback(true);\n    if (index === questions[currentQuestion].correctIndex) {\n      setScore(score + 1);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    setSelectedOption(null);\n    setShowFeedback(false);\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      alert(`Quiz completed! Your score: ${score}/${questions.length}`);\n      setCurrentQuestion(0);\n      setScore(0);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Phish or Legit?\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom>\n        Question {currentQuestion + 1} of {questions.length}\n      </Typography>\n      <Card variant=\"outlined\" style={{ padding: \"20px\", marginBottom: \"20px\" }}>\n        <CardContent>\n          <Typography variant=\"h5\">{questions[currentQuestion].question}</Typography>\n        </CardContent>\n      </Card>\n      <div>\n        {questions[currentQuestion].options.map((option, index) => (\n          <Button\n            key={index}\n            variant=\"contained\"\n            color={\n              showFeedback && index === questions[currentQuestion].correctIndex\n                ? \"success\"\n                : showFeedback && index === selectedOption\n                ? \"error\"\n                : \"primary\"\n            }\n            style={{ display: \"block\", width: \"100%\", marginBottom: \"10px\" }}\n            onClick={() => handleAnswerClick(index)}\n            disabled={showFeedback}\n          >\n            {option}\n          </Button>\n        ))}\n      </div>\n      {showFeedback && (\n        <Card variant=\"outlined\" style={{ padding: \"20px\", marginTop: \"20px\" }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              {selectedOption === questions[currentQuestion].correctIndex\n                ? \"Correct!\"\n                : \"Incorrect!\"}\n            </Typography>\n            <Typography variant=\"body1\">{questions[currentQuestion].explanation}</Typography>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              style={{ marginTop: \"10px\" }}\n              onClick={handleNextQuestion}\n            >\n              Next Question\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </Container>\n  );\n};\n\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}